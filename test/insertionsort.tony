<*
 * Test case: insertionsort.tony
 * Result: Pass
 *>

def main ():

  def list[int] qsort (list[int] l):

    def list[int] qsort_aux (list[int] l; list[int] rest):
      int pivot, x
      list[int] lt, ge

      %puts("qsort_aux\n")
      if nil?(l):
        %puts("list in qsort_aux is nil\n ")

        return rest end
      pivot := head(l)
      l := tail(l)
      for lt := nil, ge := nil; not nil?(l); l := tail(l):
        x := head(l)
        % puts("inside for ") puti(x) putc('\n')
        if x < pivot:
          % puts("x = " ) puti(x) puts(" < pivot = ") puti(pivot) putc('\n')
          lt := x # lt
        else:
          % puts("x = " ) puti(x) puts(" >= pivot = ") puti(pivot) putc('\n')
          ge := x # ge
        end
      end
      return qsort_aux(lt, pivot # qsort_aux(ge, rest))
    end

    return qsort_aux(l, nil)
  end

  def writeList (char[] msg; list[int] l):
    bool more

    puts(msg)
    for more := false; not nil?(l); l := tail(l), more := true:
      if more: puts(", ") end
      puti(head(l))
    end
    puts("\n")
  end

  int seed, i
  list[int] l

  seed := 65
  for i := 0, l := nil; i < 16; i := i+1:
    seed := (seed * 137 + 220 + i) mod 101
    l := seed # l
  end
  writeList("Initial list: ", l)
  l := qsort(l)
  writeList("Sorted list: ", l)
end
