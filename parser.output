Terminals unused in grammar

   "program"
   "bool"
   "char"
   "decl"
   "else"
   "elsif"
   "exit"
   "false"
   "for"
   "head"
   "if"
   "int"
   "list"
   "new"
   "nil"
   "nil?"
   "ref"
   "return"
   "skip"
   "tail"
   "true"
   "not"
   "and"
   "or"
   ":="
   "<>"
   "<="
   ">="
   T_id
   T_int_const
   T_char_const
   T_string_const
   '*'
   '/'
   '+'
   '-'
   '#'
   T_mod


Grammar

    0 $accept: program $end

    1 program: func-def
    2        | hellotest

    3 hellotest: "hellotest"

    4 func-def: "def" header ':' func-def-list stmt-plus-list "end"

    5 func-def-list: %empty
    6              | func-def func-def-list
    7              | func-decl func-def-list
    8              | var-def func-def-list

    9 stmt-plus-list: stmt
   10               | stmt stmt-plus-list

   11 var-def: "vd"

   12 stmt: "stmt"

   13 func-decl: "fdl"

   14 header: "hd"


Terminals, with rules where they appear

$end (0) 0
'#' (35)
'*' (42)
'+' (43)
'-' (45)
'/' (47)
':' (58) 4
error (256)
"program" (258)
"bool" (259)
"char" (260)
"decl" (261)
"def" (262) 4
"else" (263)
"elsif" (264)
"end" (265) 4
"exit" (266)
"false" (267)
"for" (268)
"head" (269)
"if" (270)
"int" (271)
"list" (272)
"new" (273)
"nil" (274)
"nil?" (275)
"ref" (276)
"return" (277)
"skip" (278)
"tail" (279)
"true" (280)
"not" (281)
"and" (282)
"or" (283)
":=" (284)
"<>" (285)
"<=" (286)
">=" (287)
T_id (288)
T_int_const (289)
T_char_const (290)
T_string_const (291)
T_mod (292)
"hellotest" (293) 3
"vd" (294) 11
"stmt" (295) 12
"fdl" (296) 13
"hd" (297) 14


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1 2, on right: 0
hellotest (51)
    on left: 3, on right: 2
func-def (52)
    on left: 4, on right: 1 6
func-def-list (53)
    on left: 5 6 7 8, on right: 4 6 7 8
stmt-plus-list (54)
    on left: 9 10, on right: 4 10
var-def (55)
    on left: 11, on right: 8
stmt (56)
    on left: 12, on right: 9 10
func-decl (57)
    on left: 13, on right: 7
header (58)
    on left: 14, on right: 4


State 0

    0 $accept: . program $end

    "def"        shift, and go to state 1
    "hellotest"  shift, and go to state 2

    program    go to state 3
    hellotest  go to state 4
    func-def   go to state 5


State 1

    4 func-def: "def" . header ':' func-def-list stmt-plus-list "end"

    "hd"  shift, and go to state 6

    header  go to state 7


State 2

    3 hellotest: "hellotest" .

    $default  reduce using rule 3 (hellotest)


State 3

    0 $accept: program . $end

    $end  shift, and go to state 8


State 4

    2 program: hellotest .

    $default  reduce using rule 2 (program)


State 5

    1 program: func-def .

    $default  reduce using rule 1 (program)


State 6

   14 header: "hd" .

    $default  reduce using rule 14 (header)


State 7

    4 func-def: "def" header . ':' func-def-list stmt-plus-list "end"

    ':'  shift, and go to state 9


State 8

    0 $accept: program $end .

    $default  accept


State 9

    4 func-def: "def" header ':' . func-def-list stmt-plus-list "end"

    "def"  shift, and go to state 1
    "vd"   shift, and go to state 10
    "fdl"  shift, and go to state 11

    $default  reduce using rule 5 (func-def-list)

    func-def       go to state 12
    func-def-list  go to state 13
    var-def        go to state 14
    func-decl      go to state 15


State 10

   11 var-def: "vd" .

    $default  reduce using rule 11 (var-def)


State 11

   13 func-decl: "fdl" .

    $default  reduce using rule 13 (func-decl)


State 12

    6 func-def-list: func-def . func-def-list

    "def"  shift, and go to state 1
    "vd"   shift, and go to state 10
    "fdl"  shift, and go to state 11

    $default  reduce using rule 5 (func-def-list)

    func-def       go to state 12
    func-def-list  go to state 16
    var-def        go to state 14
    func-decl      go to state 15


State 13

    4 func-def: "def" header ':' func-def-list . stmt-plus-list "end"

    "stmt"  shift, and go to state 17

    stmt-plus-list  go to state 18
    stmt            go to state 19


State 14

    8 func-def-list: var-def . func-def-list

    "def"  shift, and go to state 1
    "vd"   shift, and go to state 10
    "fdl"  shift, and go to state 11

    $default  reduce using rule 5 (func-def-list)

    func-def       go to state 12
    func-def-list  go to state 20
    var-def        go to state 14
    func-decl      go to state 15


State 15

    7 func-def-list: func-decl . func-def-list

    "def"  shift, and go to state 1
    "vd"   shift, and go to state 10
    "fdl"  shift, and go to state 11

    $default  reduce using rule 5 (func-def-list)

    func-def       go to state 12
    func-def-list  go to state 21
    var-def        go to state 14
    func-decl      go to state 15


State 16

    6 func-def-list: func-def func-def-list .

    $default  reduce using rule 6 (func-def-list)


State 17

   12 stmt: "stmt" .

    $default  reduce using rule 12 (stmt)


State 18

    4 func-def: "def" header ':' func-def-list stmt-plus-list . "end"

    "end"  shift, and go to state 22


State 19

    9 stmt-plus-list: stmt .
   10               | stmt . stmt-plus-list

    "stmt"  shift, and go to state 17

    $default  reduce using rule 9 (stmt-plus-list)

    stmt-plus-list  go to state 23
    stmt            go to state 19


State 20

    8 func-def-list: var-def func-def-list .

    $default  reduce using rule 8 (func-def-list)


State 21

    7 func-def-list: func-decl func-def-list .

    $default  reduce using rule 7 (func-def-list)


State 22

    4 func-def: "def" header ':' func-def-list stmt-plus-list "end" .

    $default  reduce using rule 4 (func-def)


State 23

   10 stmt-plus-list: stmt stmt-plus-list .

    $default  reduce using rule 10 (stmt-plus-list)
