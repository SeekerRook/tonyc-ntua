Terminals unused in grammar

   "mod"


State 96 conflicts: 3 shift/reduce
State 116 conflicts: 14 shift/reduce
State 130 conflicts: 3 shift/reduce
State 132 conflicts: 14 shift/reduce
State 133 conflicts: 14 shift/reduce
State 134 conflicts: 14 shift/reduce


Grammar

    0 $accept: program $end

    1 program: func-def

    2 func-def: "def" header ':' func-def-list stmt-list-plus "end"

    3 func-def-list: %empty
    4              | func-def func-def-list
    5              | func-decl func-def-list
    6              | var-def func-def-list

    7 header: type T_id '(' formal-list ')'
    8       | T_id '(' formal-list ')'

    9 formal-list: %empty
   10            | formal formal-list-plus

   11 formal: "ref" type T_id id-list
   12       | type T_id id-list

   13 formal-list-plus: %empty
   14                 | ';' formal formal-list-plus

   15 type: "int"
   16     | "bool"
   17     | "char"
   18     | type '[' ']'
   19     | "list" '[' type ']'

   20 func-decl: "decl" header

   21 var-def: type T_id id-list

   22 id-list: %empty
   23        | ',' T_id id-list

   24 stmt-list-plus: stmt
   25               | stmt stmt-list-plus

   26 stmt: simple
   27     | "exit"
   28     | "return" expr
   29     | if-stmt
   30     | "for" simple-list ';' expr ';' simple-list ':' stmt-list-plus "end"

   31 if-stmt: "if" expr ':' stmt-list-plus elif-stmt else-stmt "end"

   32 elif-stmt: %empty
   33          | "elsif" expr ':' stmt-list-plus elif-stmt

   34 else-stmt: %empty
   35          | "else" ':' stmt-list-plus

   36 simple: "skip"
   37       | atom ":=" expr
   38       | call

   39 simple-list: simple simple-list-plus

   40 simple-list-plus: %empty
   41                 | ',' simple-list

   42 call: T_id '(' expr-list ')'
   43     | T_id '(' ')'

   44 expr-list: expr expr-list-plus

   45 expr-list-plus: %empty
   46               | ',' expr expr-list-plus

   47 atom: T_id
   48     | T_string_const
   49     | atom '[' expr ']'
   50     | call

   51 expr: atom
   52     | T_int_const
   53     | T_char_const
   54     | '(' expr ')'
   55     | sign expr
   56     | expr math-op expr
   57     | expr comp-op expr
   58     | "true"
   59     | "false"
   60     | "not" expr
   61     | expr logic-op expr
   62     | "new" type '[' expr ']'
   63     | "nil"
   64     | "nil?" '(' expr ')'
   65     | expr '#' expr
   66     | "head" '(' expr ')'
   67     | "tail" '(' expr ')'

   68 sign: '+'
   69     | '-'

   70 math-op: '+'
   71        | '-'
   72        | '*'
   73        | '/'
   74        | T_mod

   75 comp-op: '='
   76        | "<>"
   77        | '>'
   78        | '<'
   79        | ">="
   80        | "<="

   81 logic-op: "and"
   82         | "or"


Terminals, with rules where they appear

$end (0) 0
'#' (35) 65
'(' (40) 7 8 42 43 54 64 66 67
')' (41) 7 8 42 43 54 64 66 67
'*' (42) 72
'+' (43) 68 70
',' (44) 23 41 46
'-' (45) 69 71
'/' (47) 73
':' (58) 2 30 31 33 35
';' (59) 14 30
'<' (60) 78
'=' (61) 75
'>' (62) 77
'[' (91) 18 19 49 62
']' (93) 18 19 49 62
error (256)
"bool" (258) 16
"char" (259) 17
"decl" (260) 20
"def" (261) 2
"else" (262) 35
"elsif" (263) 33
"end" (264) 2 30 31
"exit" (265) 27
"false" (266) 59
"for" (267) 30
"head" (268) 66
"if" (269) 31
"int" (270) 15
"list" (271) 19
"new" (272) 62
"nil" (273) 63
"nil?" (274) 64
"ref" (275) 11
"return" (276) 28
"skip" (277) 36
"tail" (278) 67
"true" (279) 58
"not" (280) 60
"and" (281) 81
"or" (282) 82
":=" (283) 37
"<>" (284) 76
"<=" (285) 80
">=" (286) 79
T_id (287) 7 8 11 12 21 23 42 43 47
T_int_const (288) 52
T_char_const (289) 53
T_string_const (290) 48
T_mod (291) 74
"mod" (292)


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program (54)
    on left: 1, on right: 0
func-def (55)
    on left: 2, on right: 1 4
func-def-list (56)
    on left: 3 4 5 6, on right: 2 4 5 6
header (57)
    on left: 7 8, on right: 2 20
formal-list (58)
    on left: 9 10, on right: 7 8
formal (59)
    on left: 11 12, on right: 10 14
formal-list-plus (60)
    on left: 13 14, on right: 10 14
type (61)
    on left: 15 16 17 18 19, on right: 7 11 12 18 19 21 62
func-decl (62)
    on left: 20, on right: 5
var-def (63)
    on left: 21, on right: 6
id-list (64)
    on left: 22 23, on right: 11 12 21 23
stmt-list-plus (65)
    on left: 24 25, on right: 2 25 30 31 33 35
stmt (66)
    on left: 26 27 28 29 30, on right: 24 25
if-stmt (67)
    on left: 31, on right: 29
elif-stmt (68)
    on left: 32 33, on right: 31 33
else-stmt (69)
    on left: 34 35, on right: 31
simple (70)
    on left: 36 37 38, on right: 26 39
simple-list (71)
    on left: 39, on right: 30 41
simple-list-plus (72)
    on left: 40 41, on right: 39
call (73)
    on left: 42 43, on right: 38 50
expr-list (74)
    on left: 44, on right: 42
expr-list-plus (75)
    on left: 45 46, on right: 44 46
atom (76)
    on left: 47 48 49 50, on right: 37 49 51
expr (77)
    on left: 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67, on right:
    28 30 31 33 37 44 46 49 54 55 56 57 60 61 62 64 65 66 67
sign (78)
    on left: 68 69, on right: 55
math-op (79)
    on left: 70 71 72 73 74, on right: 56
comp-op (80)
    on left: 75 76 77 78 79 80, on right: 57
logic-op (81)
    on left: 81 82, on right: 61


State 0

    0 $accept: . program $end

    "def"  shift, and go to state 1

    program   go to state 2
    func-def  go to state 3


State 1

    2 func-def: "def" . header ':' func-def-list stmt-list-plus "end"

    "bool"  shift, and go to state 4
    "char"  shift, and go to state 5
    "int"   shift, and go to state 6
    "list"  shift, and go to state 7
    T_id    shift, and go to state 8

    header  go to state 9
    type    go to state 10


State 2

    0 $accept: program . $end

    $end  shift, and go to state 11


State 3

    1 program: func-def .

    $default  reduce using rule 1 (program)


State 4

   16 type: "bool" .

    $default  reduce using rule 16 (type)


State 5

   17 type: "char" .

    $default  reduce using rule 17 (type)


State 6

   15 type: "int" .

    $default  reduce using rule 15 (type)


State 7

   19 type: "list" . '[' type ']'

    '['  shift, and go to state 12


State 8

    8 header: T_id . '(' formal-list ')'

    '('  shift, and go to state 13


State 9

    2 func-def: "def" header . ':' func-def-list stmt-list-plus "end"

    ':'  shift, and go to state 14


State 10

    7 header: type . T_id '(' formal-list ')'
   18 type: type . '[' ']'

    T_id  shift, and go to state 15
    '['   shift, and go to state 16


State 11

    0 $accept: program $end .

    $default  accept


State 12

   19 type: "list" '[' . type ']'

    "bool"  shift, and go to state 4
    "char"  shift, and go to state 5
    "int"   shift, and go to state 6
    "list"  shift, and go to state 7

    type  go to state 17


State 13

    8 header: T_id '(' . formal-list ')'

    "bool"  shift, and go to state 4
    "char"  shift, and go to state 5
    "int"   shift, and go to state 6
    "list"  shift, and go to state 7
    "ref"   shift, and go to state 18

    $default  reduce using rule 9 (formal-list)

    formal-list  go to state 19
    formal       go to state 20
    type         go to state 21


State 14

    2 func-def: "def" header ':' . func-def-list stmt-list-plus "end"

    "bool"  shift, and go to state 4
    "char"  shift, and go to state 5
    "decl"  shift, and go to state 22
    "def"   shift, and go to state 1
    "int"   shift, and go to state 6
    "list"  shift, and go to state 7

    $default  reduce using rule 3 (func-def-list)

    func-def       go to state 23
    func-def-list  go to state 24
    type           go to state 25
    func-decl      go to state 26
    var-def        go to state 27


State 15

    7 header: type T_id . '(' formal-list ')'

    '('  shift, and go to state 28


State 16

   18 type: type '[' . ']'

    ']'  shift, and go to state 29


State 17

   18 type: type . '[' ']'
   19     | "list" '[' type . ']'

    '['  shift, and go to state 16
    ']'  shift, and go to state 30


State 18

   11 formal: "ref" . type T_id id-list

    "bool"  shift, and go to state 4
    "char"  shift, and go to state 5
    "int"   shift, and go to state 6
    "list"  shift, and go to state 7

    type  go to state 31


State 19

    8 header: T_id '(' formal-list . ')'

    ')'  shift, and go to state 32


State 20

   10 formal-list: formal . formal-list-plus

    ';'  shift, and go to state 33

    $default  reduce using rule 13 (formal-list-plus)

    formal-list-plus  go to state 34


State 21

   12 formal: type . T_id id-list
   18 type: type . '[' ']'

    T_id  shift, and go to state 35
    '['   shift, and go to state 16


State 22

   20 func-decl: "decl" . header

    "bool"  shift, and go to state 4
    "char"  shift, and go to state 5
    "int"   shift, and go to state 6
    "list"  shift, and go to state 7
    T_id    shift, and go to state 8

    header  go to state 36
    type    go to state 10


State 23

    4 func-def-list: func-def . func-def-list

    "bool"  shift, and go to state 4
    "char"  shift, and go to state 5
    "decl"  shift, and go to state 22
    "def"   shift, and go to state 1
    "int"   shift, and go to state 6
    "list"  shift, and go to state 7

    $default  reduce using rule 3 (func-def-list)

    func-def       go to state 23
    func-def-list  go to state 37
    type           go to state 25
    func-decl      go to state 26
    var-def        go to state 27


State 24

    2 func-def: "def" header ':' func-def-list . stmt-list-plus "end"

    "exit"          shift, and go to state 38
    "for"           shift, and go to state 39
    "if"            shift, and go to state 40
    "return"        shift, and go to state 41
    "skip"          shift, and go to state 42
    T_id            shift, and go to state 43
    T_string_const  shift, and go to state 44

    stmt-list-plus  go to state 45
    stmt            go to state 46
    if-stmt         go to state 47
    simple          go to state 48
    call            go to state 49
    atom            go to state 50


State 25

   18 type: type . '[' ']'
   21 var-def: type . T_id id-list

    T_id  shift, and go to state 51
    '['   shift, and go to state 16


State 26

    5 func-def-list: func-decl . func-def-list

    "bool"  shift, and go to state 4
    "char"  shift, and go to state 5
    "decl"  shift, and go to state 22
    "def"   shift, and go to state 1
    "int"   shift, and go to state 6
    "list"  shift, and go to state 7

    $default  reduce using rule 3 (func-def-list)

    func-def       go to state 23
    func-def-list  go to state 52
    type           go to state 25
    func-decl      go to state 26
    var-def        go to state 27


State 27

    6 func-def-list: var-def . func-def-list

    "bool"  shift, and go to state 4
    "char"  shift, and go to state 5
    "decl"  shift, and go to state 22
    "def"   shift, and go to state 1
    "int"   shift, and go to state 6
    "list"  shift, and go to state 7

    $default  reduce using rule 3 (func-def-list)

    func-def       go to state 23
    func-def-list  go to state 53
    type           go to state 25
    func-decl      go to state 26
    var-def        go to state 27


State 28

    7 header: type T_id '(' . formal-list ')'

    "bool"  shift, and go to state 4
    "char"  shift, and go to state 5
    "int"   shift, and go to state 6
    "list"  shift, and go to state 7
    "ref"   shift, and go to state 18

    $default  reduce using rule 9 (formal-list)

    formal-list  go to state 54
    formal       go to state 20
    type         go to state 21


State 29

   18 type: type '[' ']' .

    $default  reduce using rule 18 (type)


State 30

   19 type: "list" '[' type ']' .

    $default  reduce using rule 19 (type)


State 31

   11 formal: "ref" type . T_id id-list
   18 type: type . '[' ']'

    T_id  shift, and go to state 55
    '['   shift, and go to state 16


State 32

    8 header: T_id '(' formal-list ')' .

    $default  reduce using rule 8 (header)


State 33

   14 formal-list-plus: ';' . formal formal-list-plus

    "bool"  shift, and go to state 4
    "char"  shift, and go to state 5
    "int"   shift, and go to state 6
    "list"  shift, and go to state 7
    "ref"   shift, and go to state 18

    formal  go to state 56
    type    go to state 21


State 34

   10 formal-list: formal formal-list-plus .

    $default  reduce using rule 10 (formal-list)


State 35

   12 formal: type T_id . id-list

    ','  shift, and go to state 57

    $default  reduce using rule 22 (id-list)

    id-list  go to state 58


State 36

   20 func-decl: "decl" header .

    $default  reduce using rule 20 (func-decl)


State 37

    4 func-def-list: func-def func-def-list .

    $default  reduce using rule 4 (func-def-list)


State 38

   27 stmt: "exit" .

    $default  reduce using rule 27 (stmt)


State 39

   30 stmt: "for" . simple-list ';' expr ';' simple-list ':' stmt-list-plus "end"

    "skip"          shift, and go to state 42
    T_id            shift, and go to state 43
    T_string_const  shift, and go to state 44

    simple       go to state 59
    simple-list  go to state 60
    call         go to state 49
    atom         go to state 50


State 40

   31 if-stmt: "if" . expr ':' stmt-list-plus elif-stmt else-stmt "end"

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 76
    sign  go to state 77


State 41

   28 stmt: "return" . expr

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 78
    sign  go to state 77


State 42

   36 simple: "skip" .

    $default  reduce using rule 36 (simple)


State 43

   42 call: T_id . '(' expr-list ')'
   43     | T_id . '(' ')'
   47 atom: T_id .

    '('  shift, and go to state 79

    $default  reduce using rule 47 (atom)


State 44

   48 atom: T_string_const .

    $default  reduce using rule 48 (atom)


State 45

    2 func-def: "def" header ':' func-def-list stmt-list-plus . "end"

    "end"  shift, and go to state 80


State 46

   24 stmt-list-plus: stmt .
   25               | stmt . stmt-list-plus

    "exit"          shift, and go to state 38
    "for"           shift, and go to state 39
    "if"            shift, and go to state 40
    "return"        shift, and go to state 41
    "skip"          shift, and go to state 42
    T_id            shift, and go to state 43
    T_string_const  shift, and go to state 44

    $default  reduce using rule 24 (stmt-list-plus)

    stmt-list-plus  go to state 81
    stmt            go to state 46
    if-stmt         go to state 47
    simple          go to state 48
    call            go to state 49
    atom            go to state 50


State 47

   29 stmt: if-stmt .

    $default  reduce using rule 29 (stmt)


State 48

   26 stmt: simple .

    $default  reduce using rule 26 (stmt)


State 49

   38 simple: call .
   50 atom: call .

    ":="      reduce using rule 50 (atom)
    '['       reduce using rule 50 (atom)
    $default  reduce using rule 38 (simple)


State 50

   37 simple: atom . ":=" expr
   49 atom: atom . '[' expr ']'

    ":="  shift, and go to state 82
    '['   shift, and go to state 83


State 51

   21 var-def: type T_id . id-list

    ','  shift, and go to state 57

    $default  reduce using rule 22 (id-list)

    id-list  go to state 84


State 52

    5 func-def-list: func-decl func-def-list .

    $default  reduce using rule 5 (func-def-list)


State 53

    6 func-def-list: var-def func-def-list .

    $default  reduce using rule 6 (func-def-list)


State 54

    7 header: type T_id '(' formal-list . ')'

    ')'  shift, and go to state 85


State 55

   11 formal: "ref" type T_id . id-list

    ','  shift, and go to state 57

    $default  reduce using rule 22 (id-list)

    id-list  go to state 86


State 56

   14 formal-list-plus: ';' formal . formal-list-plus

    ';'  shift, and go to state 33

    $default  reduce using rule 13 (formal-list-plus)

    formal-list-plus  go to state 87


State 57

   23 id-list: ',' . T_id id-list

    T_id  shift, and go to state 88


State 58

   12 formal: type T_id id-list .

    $default  reduce using rule 12 (formal)


State 59

   39 simple-list: simple . simple-list-plus

    ','  shift, and go to state 89

    $default  reduce using rule 40 (simple-list-plus)

    simple-list-plus  go to state 90


State 60

   30 stmt: "for" simple-list . ';' expr ';' simple-list ':' stmt-list-plus "end"

    ';'  shift, and go to state 91


State 61

   59 expr: "false" .

    $default  reduce using rule 59 (expr)


State 62

   66 expr: "head" . '(' expr ')'

    '('  shift, and go to state 92


State 63

   62 expr: "new" . type '[' expr ']'

    "bool"  shift, and go to state 4
    "char"  shift, and go to state 5
    "int"   shift, and go to state 6
    "list"  shift, and go to state 7

    type  go to state 93


State 64

   63 expr: "nil" .

    $default  reduce using rule 63 (expr)


State 65

   64 expr: "nil?" . '(' expr ')'

    '('  shift, and go to state 94


State 66

   67 expr: "tail" . '(' expr ')'

    '('  shift, and go to state 95


State 67

   58 expr: "true" .

    $default  reduce using rule 58 (expr)


State 68

   60 expr: "not" . expr

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 96
    sign  go to state 77


State 69

   52 expr: T_int_const .

    $default  reduce using rule 52 (expr)


State 70

   53 expr: T_char_const .

    $default  reduce using rule 53 (expr)


State 71

   68 sign: '+' .

    $default  reduce using rule 68 (sign)


State 72

   69 sign: '-' .

    $default  reduce using rule 69 (sign)


State 73

   54 expr: '(' . expr ')'

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 97
    sign  go to state 77


State 74

   50 atom: call .

    $default  reduce using rule 50 (atom)


State 75

   49 atom: atom . '[' expr ']'
   51 expr: atom .

    '['  shift, and go to state 83

    $default  reduce using rule 51 (expr)


State 76

   31 if-stmt: "if" expr . ':' stmt-list-plus elif-stmt else-stmt "end"
   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   65     | expr . '#' expr

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    ':'    shift, and go to state 109
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 77

   55 expr: sign . expr

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 116
    sign  go to state 77


State 78

   28 stmt: "return" expr .
   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   65     | expr . '#' expr

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    $default  reduce using rule 28 (stmt)

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 79

   42 call: T_id '(' . expr-list ')'
   43     | T_id '(' . ')'

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73
    ')'             shift, and go to state 117

    call       go to state 74
    expr-list  go to state 118
    atom       go to state 75
    expr       go to state 119
    sign       go to state 77


State 80

    2 func-def: "def" header ':' func-def-list stmt-list-plus "end" .

    $default  reduce using rule 2 (func-def)


State 81

   25 stmt-list-plus: stmt stmt-list-plus .

    $default  reduce using rule 25 (stmt-list-plus)


State 82

   37 simple: atom ":=" . expr

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 120
    sign  go to state 77


State 83

   49 atom: atom '[' . expr ']'

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 121
    sign  go to state 77


State 84

   21 var-def: type T_id id-list .

    $default  reduce using rule 21 (var-def)


State 85

    7 header: type T_id '(' formal-list ')' .

    $default  reduce using rule 7 (header)


State 86

   11 formal: "ref" type T_id id-list .

    $default  reduce using rule 11 (formal)


State 87

   14 formal-list-plus: ';' formal formal-list-plus .

    $default  reduce using rule 14 (formal-list-plus)


State 88

   23 id-list: ',' T_id . id-list

    ','  shift, and go to state 57

    $default  reduce using rule 22 (id-list)

    id-list  go to state 122


State 89

   41 simple-list-plus: ',' . simple-list

    "skip"          shift, and go to state 42
    T_id            shift, and go to state 43
    T_string_const  shift, and go to state 44

    simple       go to state 59
    simple-list  go to state 123
    call         go to state 49
    atom         go to state 50


State 90

   39 simple-list: simple simple-list-plus .

    $default  reduce using rule 39 (simple-list)


State 91

   30 stmt: "for" simple-list ';' . expr ';' simple-list ':' stmt-list-plus "end"

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 124
    sign  go to state 77


State 92

   66 expr: "head" '(' . expr ')'

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 125
    sign  go to state 77


State 93

   18 type: type . '[' ']'
   62 expr: "new" type . '[' expr ']'

    '['  shift, and go to state 126


State 94

   64 expr: "nil?" '(' . expr ')'

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 127
    sign  go to state 77


State 95

   67 expr: "tail" '(' . expr ')'

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 128
    sign  go to state 77


State 96

   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   60     | "not" expr .
   61     | expr . logic-op expr
   65     | expr . '#' expr

    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    '='       [reduce using rule 60 (expr)]
    '>'       [reduce using rule 60 (expr)]
    '<'       [reduce using rule 60 (expr)]
    $default  reduce using rule 60 (expr)

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 97

   54 expr: '(' expr . ')'
   56     | expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   65     | expr . '#' expr

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    ')'    shift, and go to state 129
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 98

   81 logic-op: "and" .

    $default  reduce using rule 81 (logic-op)


State 99

   82 logic-op: "or" .

    $default  reduce using rule 82 (logic-op)


State 100

   76 comp-op: "<>" .

    $default  reduce using rule 76 (comp-op)


State 101

   80 comp-op: "<=" .

    $default  reduce using rule 80 (comp-op)


State 102

   79 comp-op: ">=" .

    $default  reduce using rule 79 (comp-op)


State 103

   72 math-op: '*' .

    $default  reduce using rule 72 (math-op)


State 104

   73 math-op: '/' .

    $default  reduce using rule 73 (math-op)


State 105

   70 math-op: '+' .

    $default  reduce using rule 70 (math-op)


State 106

   71 math-op: '-' .

    $default  reduce using rule 71 (math-op)


State 107

   65 expr: expr '#' . expr

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 130
    sign  go to state 77


State 108

   74 math-op: T_mod .

    $default  reduce using rule 74 (math-op)


State 109

   31 if-stmt: "if" expr ':' . stmt-list-plus elif-stmt else-stmt "end"

    "exit"          shift, and go to state 38
    "for"           shift, and go to state 39
    "if"            shift, and go to state 40
    "return"        shift, and go to state 41
    "skip"          shift, and go to state 42
    T_id            shift, and go to state 43
    T_string_const  shift, and go to state 44

    stmt-list-plus  go to state 131
    stmt            go to state 46
    if-stmt         go to state 47
    simple          go to state 48
    call            go to state 49
    atom            go to state 50


State 110

   75 comp-op: '=' .

    $default  reduce using rule 75 (comp-op)


State 111

   77 comp-op: '>' .

    $default  reduce using rule 77 (comp-op)


State 112

   78 comp-op: '<' .

    $default  reduce using rule 78 (comp-op)


State 113

   56 expr: expr math-op . expr

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 132
    sign  go to state 77


State 114

   57 expr: expr comp-op . expr

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 133
    sign  go to state 77


State 115

   61 expr: expr logic-op . expr

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 134
    sign  go to state 77


State 116

   55 expr: sign expr .
   56     | expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   65     | expr . '#' expr

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    "and"     [reduce using rule 55 (expr)]
    "or"      [reduce using rule 55 (expr)]
    "<>"      [reduce using rule 55 (expr)]
    "<="      [reduce using rule 55 (expr)]
    ">="      [reduce using rule 55 (expr)]
    '*'       [reduce using rule 55 (expr)]
    '/'       [reduce using rule 55 (expr)]
    '+'       [reduce using rule 55 (expr)]
    '-'       [reduce using rule 55 (expr)]
    '#'       [reduce using rule 55 (expr)]
    T_mod     [reduce using rule 55 (expr)]
    '='       [reduce using rule 55 (expr)]
    '>'       [reduce using rule 55 (expr)]
    '<'       [reduce using rule 55 (expr)]
    $default  reduce using rule 55 (expr)

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 117

   43 call: T_id '(' ')' .

    $default  reduce using rule 43 (call)


State 118

   42 call: T_id '(' expr-list . ')'

    ')'  shift, and go to state 135


State 119

   44 expr-list: expr . expr-list-plus
   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   65     | expr . '#' expr

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    ','    shift, and go to state 136
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    $default  reduce using rule 45 (expr-list-plus)

    expr-list-plus  go to state 137
    math-op         go to state 113
    comp-op         go to state 114
    logic-op        go to state 115


State 120

   37 simple: atom ":=" expr .
   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   65     | expr . '#' expr

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    $default  reduce using rule 37 (simple)

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 121

   49 atom: atom '[' expr . ']'
   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   65     | expr . '#' expr

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    ']'    shift, and go to state 138
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 122

   23 id-list: ',' T_id id-list .

    $default  reduce using rule 23 (id-list)


State 123

   41 simple-list-plus: ',' simple-list .

    $default  reduce using rule 41 (simple-list-plus)


State 124

   30 stmt: "for" simple-list ';' expr . ';' simple-list ':' stmt-list-plus "end"
   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   65     | expr . '#' expr

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    ';'    shift, and go to state 139
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 125

   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   65     | expr . '#' expr
   66     | "head" '(' expr . ')'

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    ')'    shift, and go to state 140
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 126

   18 type: type '[' . ']'
   62 expr: "new" type '[' . expr ']'

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73
    ']'             shift, and go to state 29

    call  go to state 74
    atom  go to state 75
    expr  go to state 141
    sign  go to state 77


State 127

   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   64     | "nil?" '(' expr . ')'
   65     | expr . '#' expr

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    ')'    shift, and go to state 142
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 128

   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   65     | expr . '#' expr
   67     | "tail" '(' expr . ')'

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    ')'    shift, and go to state 143
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 129

   54 expr: '(' expr ')' .

    $default  reduce using rule 54 (expr)


State 130

   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   65     | expr . '#' expr
   65     | expr '#' expr .

    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    '='       [reduce using rule 65 (expr)]
    '>'       [reduce using rule 65 (expr)]
    '<'       [reduce using rule 65 (expr)]
    $default  reduce using rule 65 (expr)

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 131

   31 if-stmt: "if" expr ':' stmt-list-plus . elif-stmt else-stmt "end"

    "elsif"  shift, and go to state 144

    $default  reduce using rule 32 (elif-stmt)

    elif-stmt  go to state 145


State 132

   56 expr: expr . math-op expr
   56     | expr math-op expr .
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   65     | expr . '#' expr

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    "and"     [reduce using rule 56 (expr)]
    "or"      [reduce using rule 56 (expr)]
    "<>"      [reduce using rule 56 (expr)]
    "<="      [reduce using rule 56 (expr)]
    ">="      [reduce using rule 56 (expr)]
    '*'       [reduce using rule 56 (expr)]
    '/'       [reduce using rule 56 (expr)]
    '+'       [reduce using rule 56 (expr)]
    '-'       [reduce using rule 56 (expr)]
    '#'       [reduce using rule 56 (expr)]
    T_mod     [reduce using rule 56 (expr)]
    '='       [reduce using rule 56 (expr)]
    '>'       [reduce using rule 56 (expr)]
    '<'       [reduce using rule 56 (expr)]
    $default  reduce using rule 56 (expr)

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 133

   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   57     | expr comp-op expr .
   61     | expr . logic-op expr
   65     | expr . '#' expr

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    "and"     [reduce using rule 57 (expr)]
    "or"      [reduce using rule 57 (expr)]
    "<>"      [reduce using rule 57 (expr)]
    "<="      [reduce using rule 57 (expr)]
    ">="      [reduce using rule 57 (expr)]
    '*'       [reduce using rule 57 (expr)]
    '/'       [reduce using rule 57 (expr)]
    '+'       [reduce using rule 57 (expr)]
    '-'       [reduce using rule 57 (expr)]
    '#'       [reduce using rule 57 (expr)]
    T_mod     [reduce using rule 57 (expr)]
    '='       [reduce using rule 57 (expr)]
    '>'       [reduce using rule 57 (expr)]
    '<'       [reduce using rule 57 (expr)]
    $default  reduce using rule 57 (expr)

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 134

   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   61     | expr logic-op expr .
   65     | expr . '#' expr

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    "and"     [reduce using rule 61 (expr)]
    "or"      [reduce using rule 61 (expr)]
    "<>"      [reduce using rule 61 (expr)]
    "<="      [reduce using rule 61 (expr)]
    ">="      [reduce using rule 61 (expr)]
    '*'       [reduce using rule 61 (expr)]
    '/'       [reduce using rule 61 (expr)]
    '+'       [reduce using rule 61 (expr)]
    '-'       [reduce using rule 61 (expr)]
    '#'       [reduce using rule 61 (expr)]
    T_mod     [reduce using rule 61 (expr)]
    '='       [reduce using rule 61 (expr)]
    '>'       [reduce using rule 61 (expr)]
    '<'       [reduce using rule 61 (expr)]
    $default  reduce using rule 61 (expr)

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 135

   42 call: T_id '(' expr-list ')' .

    $default  reduce using rule 42 (call)


State 136

   46 expr-list-plus: ',' . expr expr-list-plus

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 146
    sign  go to state 77


State 137

   44 expr-list: expr expr-list-plus .

    $default  reduce using rule 44 (expr-list)


State 138

   49 atom: atom '[' expr ']' .

    $default  reduce using rule 49 (atom)


State 139

   30 stmt: "for" simple-list ';' expr ';' . simple-list ':' stmt-list-plus "end"

    "skip"          shift, and go to state 42
    T_id            shift, and go to state 43
    T_string_const  shift, and go to state 44

    simple       go to state 59
    simple-list  go to state 147
    call         go to state 49
    atom         go to state 50


State 140

   66 expr: "head" '(' expr ')' .

    $default  reduce using rule 66 (expr)


State 141

   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   62     | "new" type '[' expr . ']'
   65     | expr . '#' expr

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    ']'    shift, and go to state 148
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 142

   64 expr: "nil?" '(' expr ')' .

    $default  reduce using rule 64 (expr)


State 143

   67 expr: "tail" '(' expr ')' .

    $default  reduce using rule 67 (expr)


State 144

   33 elif-stmt: "elsif" . expr ':' stmt-list-plus elif-stmt

    "false"         shift, and go to state 61
    "head"          shift, and go to state 62
    "new"           shift, and go to state 63
    "nil"           shift, and go to state 64
    "nil?"          shift, and go to state 65
    "tail"          shift, and go to state 66
    "true"          shift, and go to state 67
    "not"           shift, and go to state 68
    T_id            shift, and go to state 43
    T_int_const     shift, and go to state 69
    T_char_const    shift, and go to state 70
    T_string_const  shift, and go to state 44
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '('             shift, and go to state 73

    call  go to state 74
    atom  go to state 75
    expr  go to state 149
    sign  go to state 77


State 145

   31 if-stmt: "if" expr ':' stmt-list-plus elif-stmt . else-stmt "end"

    "else"  shift, and go to state 150

    $default  reduce using rule 34 (else-stmt)

    else-stmt  go to state 151


State 146

   46 expr-list-plus: ',' expr . expr-list-plus
   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   65     | expr . '#' expr

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    ','    shift, and go to state 136
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    $default  reduce using rule 45 (expr-list-plus)

    expr-list-plus  go to state 152
    math-op         go to state 113
    comp-op         go to state 114
    logic-op        go to state 115


State 147

   30 stmt: "for" simple-list ';' expr ';' simple-list . ':' stmt-list-plus "end"

    ':'  shift, and go to state 153


State 148

   62 expr: "new" type '[' expr ']' .

    $default  reduce using rule 62 (expr)


State 149

   33 elif-stmt: "elsif" expr . ':' stmt-list-plus elif-stmt
   56 expr: expr . math-op expr
   57     | expr . comp-op expr
   61     | expr . logic-op expr
   65     | expr . '#' expr

    "and"  shift, and go to state 98
    "or"   shift, and go to state 99
    "<>"   shift, and go to state 100
    "<="   shift, and go to state 101
    ">="   shift, and go to state 102
    '*'    shift, and go to state 103
    '/'    shift, and go to state 104
    '+'    shift, and go to state 105
    '-'    shift, and go to state 106
    '#'    shift, and go to state 107
    T_mod  shift, and go to state 108
    ':'    shift, and go to state 154
    '='    shift, and go to state 110
    '>'    shift, and go to state 111
    '<'    shift, and go to state 112

    math-op   go to state 113
    comp-op   go to state 114
    logic-op  go to state 115


State 150

   35 else-stmt: "else" . ':' stmt-list-plus

    ':'  shift, and go to state 155


State 151

   31 if-stmt: "if" expr ':' stmt-list-plus elif-stmt else-stmt . "end"

    "end"  shift, and go to state 156


State 152

   46 expr-list-plus: ',' expr expr-list-plus .

    $default  reduce using rule 46 (expr-list-plus)


State 153

   30 stmt: "for" simple-list ';' expr ';' simple-list ':' . stmt-list-plus "end"

    "exit"          shift, and go to state 38
    "for"           shift, and go to state 39
    "if"            shift, and go to state 40
    "return"        shift, and go to state 41
    "skip"          shift, and go to state 42
    T_id            shift, and go to state 43
    T_string_const  shift, and go to state 44

    stmt-list-plus  go to state 157
    stmt            go to state 46
    if-stmt         go to state 47
    simple          go to state 48
    call            go to state 49
    atom            go to state 50


State 154

   33 elif-stmt: "elsif" expr ':' . stmt-list-plus elif-stmt

    "exit"          shift, and go to state 38
    "for"           shift, and go to state 39
    "if"            shift, and go to state 40
    "return"        shift, and go to state 41
    "skip"          shift, and go to state 42
    T_id            shift, and go to state 43
    T_string_const  shift, and go to state 44

    stmt-list-plus  go to state 158
    stmt            go to state 46
    if-stmt         go to state 47
    simple          go to state 48
    call            go to state 49
    atom            go to state 50


State 155

   35 else-stmt: "else" ':' . stmt-list-plus

    "exit"          shift, and go to state 38
    "for"           shift, and go to state 39
    "if"            shift, and go to state 40
    "return"        shift, and go to state 41
    "skip"          shift, and go to state 42
    T_id            shift, and go to state 43
    T_string_const  shift, and go to state 44

    stmt-list-plus  go to state 159
    stmt            go to state 46
    if-stmt         go to state 47
    simple          go to state 48
    call            go to state 49
    atom            go to state 50


State 156

   31 if-stmt: "if" expr ':' stmt-list-plus elif-stmt else-stmt "end" .

    $default  reduce using rule 31 (if-stmt)


State 157

   30 stmt: "for" simple-list ';' expr ';' simple-list ':' stmt-list-plus . "end"

    "end"  shift, and go to state 160


State 158

   33 elif-stmt: "elsif" expr ':' stmt-list-plus . elif-stmt

    "elsif"  shift, and go to state 144

    $default  reduce using rule 32 (elif-stmt)

    elif-stmt  go to state 161


State 159

   35 else-stmt: "else" ':' stmt-list-plus .

    $default  reduce using rule 35 (else-stmt)


State 160

   30 stmt: "for" simple-list ';' expr ';' simple-list ':' stmt-list-plus "end" .

    $default  reduce using rule 30 (stmt)


State 161

   33 elif-stmt: "elsif" expr ':' stmt-list-plus elif-stmt .

    $default  reduce using rule 33 (elif-stmt)
